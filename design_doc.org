
#+TITLE: Design Document: org-collect-code-todos

* Purpose and Overview
org-collect-code-todos is an Emacs package that:
- Collects TODO comments from source code files
- Organizes them in a structured org-mode file
- Synchronizes state changes between the org file and source code
- Provides a read-only protection mechanism to prevent accidental edits

* Helper functions:

** Org format to source code format:

Converts:

#+begin_src org
** TODO hi
DEADLINE: <2025-05-04 Sun> SCHEDULED: <2025-05-04 Sun>
:PROPERTIES:
:TODO_ID:  5c1ef67f-72c7-487c-88bc-b05c77535b01
:END:
#+end_src

to (for instance in python)

#+begin_src

# TODO[5c1ef67f-72c7-487c-88bc-b05c77535b01] refactor this
# DEADLINE: <2025-05-04 Sun> SCHEDULED: <2025-05-04 Sun>

#+end_src

** Source code format ot org format

Goes the other way


** Generate uuid -- builds a unique ID hash.


* Core Concepts
** TODO Identification
- Each TODO has a unique ID generated when first collected
- IDs are stored in source files as part of the TODO comment: TODO[id] text
- IDs are stored in the org file as the TODO_ID property
- IDs are the primary mechanism for tracking TODOs within a file
- For tracking across files, there is also a link in the org mode todo to the file and the TODO.

** File Structure
*** Source Code Files
- TODOs are stored as comments in the format: # TODO[id] text
- Optional scheduling information follows on subsequent lines: # SCHEDULED: <date> DEADLINE: <date>
- Here # refers to the comment symbol identified by prog mode.

*** Org-Mode TODO File
- Each TODO is an org heading with TODO/DONE state
- File links point back to the source file
- Properties drawer contains the TODO_ID
- Scheduling information is stored as standard org timestamps, as generated by org-schedule

** Read-Only Protection
- The org-mode TODO file is set to read-only by default
- Specific operations temporarily make the buffer writable
- After operations complete, the buffer returns to read-only state

* Synchronization Rules
** Source to Org Synchronization
*** Trigger
Saving a source file

*** Process
1. Scan the source file for TODO comments
2. For each TODO:
   - If it has an ID, find the corresponding org entry
   - If it exists, update the heading text if needed
   - If it doesn't exist, create a new org entry
3. For TODOs in the org file that reference this source file:
   - If they no longer exist in the source, archive them

*** Synchronized Elements
- TODO text content (source → org)
- TODO existence (source → org)

** Org to Source Synchronization
*** Trigger
TODO state changes, scheduling changes, or saving the org file

*** Process
1. When a TODO state or scheduling changes in the org file
2. Find the corresponding source file and TODO by ID
3. Update the TODO state and scheduling in the source file

*** Synchronized Elements
- TODO state (org → source)
- Scheduling information (org → source)
- Deadline information (org → source)

** Conflict Resolution
- Source file is authoritative for TODO text content
- Org file is authoritative for TODO state and scheduling
- IDs are preserved in both directions
- Deleted TODOs in source are archived in org, not deleted

* User Interface
** Commands for Source Files
- org-collect-code-todos-toggle-state-at-point: Toggle TODO/DONE state
- org-collect-code-todos-schedule-at-point: Set scheduling for a TODO
- org-collect-code-todos-set-deadline-at-point: Set deadline for a TODO

These all work by jumping to the corresponding org file (invisibly to the user), and running the corresponding org command at the header.

- org-collect-code-todos-jump-to-org-entry: Jump to org entry from source TODO

** Commands for Org File
Standard org commands work with special handling:
- org-todo: Toggle TODO state with synchronization to source
- org-schedule: Set scheduling with synchronization to source
- org-deadline: Set deadline with synchronization to source
- org-archive-subtree: Archive with proper handling of read-only state

The special handling that is necessary here is to temporarily unlock the file.

* Implementation Details
** Buffer Locking Mechanism
*** Key Components
- org-collect-code-todos--with-writable-buffer: Function to make buffer temporarily writable

*** Protection Process
1. When the org file is opened, it's set to read-only
2. Commands that need to modify the buffer use org-collect-code-todos--with-writable-buffer
3. This function:
   - Checks if the current buffer is the todos buffer
   - Temporarily disables read-only mode
   - Executes the operation
   - Restores read-only mode

** Hooks and Advice
*** Hooks
- after-save-hook: For prog mode. Collect TODOs when saving source files
- org-after-todo-state-change-hook: For org mode. Sync TODO state changes to source
- org-after-schedule-hook and org-after-deadline-hook:  For org mode.Sync scheduling changes
- find-file-hook: For th org mode file. Set up read-only mode and archive location

*** Advice
- Advice on org-todo, org-archive-subtree, etc. to handle read-only state

