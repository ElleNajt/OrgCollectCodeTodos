* org-collect-code-todos


** Problem:

I want TODOs directly in my code files and I want to use org mode to track those todos.

This package solves this problem by collecting TODOs from code files and making them available in a synchronized way to org mode.

Here is a demonstration:

[[file:output.gif]]
** Description

An Emacs package that automatically collects TODO comments from your code files into a centralized Org mode file.

This org mode file is read-only, except for toggling TODO/DONE and scheduling, to keep synchronization simple but keep compatibility with standard org-mode functionality, e.g. org agenda.

Changes to the TODO in the source code file update in the org mode file. When a TODO is deleted from the source code file, it is archived from the todo org mode file. TODOs can be scheduled or given deadlines, and this is synchronized.

This should work in any prog-mode, but there may be tricky things I haven't anticipated. This has been most thoroughly tested with python, typescript, elisp and nix.

** Setup:

Install and enable `org-collect-code-todos-mode`

For instance,

#+begin_src emacs-lisp :tangle yes
(require
 'org-collect-code-todos)
(org-collect-code-todos-mode 1)

;; For Doom Emacs users
(add-hook! 'doom-init-ui-hook #'org-collect-code-todos-mode)
#+end_src

** Configuration

#+begin_src emacs-lisp :tangle yes

;; Set the defualt location for the code todos org file.
;; By default this is put in the projectile project root for the project of a given source file.
(setq org-collect-code-todos-file "~/org/code-todos.org")


;; Set the key for toggling TODO state in source code and jumping to the org entry
(map! :map org-collect-code-todos-buffer-mode-map
      :n "C-c C-t" #'org-collect-code-todos-toggle-todo-state
      :n "C-c C-s" #'org-collect-code-todos-schedule
      :n "C-c C-d" #'org-collect-code-todos-deadline
      :n "C-c C-j" #'org-collect-code-todos-goto-org-todo)

;; Optionally, configure the comment prefixes.
;; Example of changing markdown-mode to use # instead of <!--:
(setq org-collect-code-todos-comment-prefixes
      (append (assq-delete-all 'markdown-mode org-collect-code-todos-comment-prefixes)
             '((markdown-mode . "#"))))

;; Enable debug logging if needed
(setq org-collect-code-todos-debug t)

;; Show informational messages during operations
(setq org-collect-code-todos-verbose t)

;; Customize the length of TODO IDs (default is 10)
(setq org-collect-code-todos-id-length 8)  ; shorter IDs
#+end_src

#+RESULTS:
: ((emacs-lisp-mode . ;;) (python-mode . #) (c-mode . //) (c++-mode . //) (java-mode . //) (js-mode . //) (css-mode . /*) (html-mode . <!--) (markdown-mode . #))

*** Note:
Make sure to put the code-todos.org file somewhere where your org agenda will scan for it!

*** On the minor mode:
Once org-collect-code-todos-mode is activated, the minor mode org-collect-code-todos-buffer-mode is automatically enabled in:
- Any buffer derived from prog-mode
- Any buffer whose major-mode is listed in org-collect-code-todos-comment-prefixes

** Usage

1. Add TODOs to your code as comments:
   
   #+begin_src python
   # TODO This needs optimization
   #+end_src

2. Save the file, and the TODO will be given an ID and collected into your org-collect-code-todos file. TODOs must be preceded by a comment character and a space to be detected.

In the source code file you will see:

   #+begin_src python
# TODO[9Ox0iSnwUn] This needs optimization
   #+end_src


In the org file you will see:

#+begin_src org
** TODO [[file:/path/to/file.py][This needs optimization]] :dir_OrgCollectCodeTodos:name_test:ext_py:repo_OrgCollectCodeTodos:
   :PROPERTIES:
   :TODO_ID: 9Ox0iSnwUn
   :FILE_PATH: /path/to/file.py
   :END:
#+end_src

In detail:
- The header is an absolute link back to the original TODO.
- Tags are added for the repo and the directory and the file and extension. The tags can be customized, see below.
- The property drawer contains the file location and the ID.

Scheduling in the org file will be reflected in the source code like this:

#+begin_src python
# TODO[9Ox0iSnwUn] This needs optimization
# SCHEDULED: <2025-04-01 Tue> DEADLINE: <2042-12-21 Thu>
#+end_src


** Working with TODOs

*** In the Org File

In the Org file, you can:
   - Mark TODOs as DONE (which updates the source code TODO to DONE)
   - Schedule TODOs or set deadlines (reflected in the source code)
   - Archive TODOs (does not impact the source code)

The Org file is otherwise kept read-only to prevent synchronization conflicts.

*** In Source Code

You can update text in a TODO and the text will be reflected in the org mode todo. This is made possible by distinguishing TODOs from eachother via an assigned ID.

Each TODO is given a unique ID generated as a random base62 string (using digits 0-9,
letters A-Z and a-z). The default length is 10 characters, which provides a very low
probability of collisions even with thousands of TODOs, without occupying too much real estate.

When you mark a TODO as DONE in the Org file, the corresponding comment in your code will be updated:
   
#+begin_src python
# DONE[9Ox0iSnwUn] This needs optimization
#+end_src

While the actual TODO toggle function calls and scheduling only happen in the org mode file, we provide convenience functions to work with TODOs directly from your source code. Effectively, these invisibly move to the org file and call the corresponding org mode function.

1. *Toggle TODO/DONE state*:
   - Place your cursor on a TODO line
   - Use `org-collect-code-todos-toggle-todo-state`
   - This finds the corresponding entry in the org file and toggles its state there
   - The change is then synchronized back to the source code

2. *Schedule a TODO*:
   - Place your cursor on a TODO line
   - Use `org-collect-code-todos-schedule`
   - This finds the corresponding entry in the org file and calls `org-schedule` on it
   - The scheduling information is then synchronized back to the source code

3. *Set a deadline*:
   - Place your cursor on a TODO line
   - Use `org-collect-code-todos-deadline`
   - This finds the corresponding entry in the org file and calls `org-deadline` on it
   - The deadline information is then synchronized back to the source code

4. *Jump to Org entry*:
   - Place your cursor on a TODO line
   - Use `org-collect-code-todos-goto-org-todo`
   - Emacs will open the Org file and jump to the corresponding entry

** Tagging:

TODOs are automatically tagged based on their location and context. By default, the following tags are added:

- Repository tag (`:repo_projectname:`): Based on the git repository name
- Directory tag (`:dir_dirname:`): Based on the immediate parent directory
- File extension tag (`:file_ext:`): Based on the file extension (e.g., `:file_py:` for Python files)
- File name tag (`:name_filename:`): Based on the file name without extension

All tags are automatically sanitized (converted to lowercase, special characters replaced with underscores) to ensure they're valid org-mode tags.

*** Customizing Tags

You can customize tag behavior through these variables:

#+begin_src emacs-lisp
;; Enable/disable specific tag types
(setq org-collect-code-todos-tag-git-repo t)    ; git repository tags
(setq org-collect-code-todos-tag-directory t)    ; directory tags
(setq org-collect-code-todos-tag-file-ext t)     ; file extension tags
(setq org-collect-code-todos-tag-file-name t)    ; file name tags

;; Customize tag prefixes
(setq org-collect-code-todos-tag-prefixes
      '((git-repo . "repo_")
        (file-ext . "file_")
        (directory . "dir_")
        (file-name . "name_")))

;; Add custom tag functions
(setq org-collect-code-todos-additional-tag-functions
      (list
       ;; Example: Add "test" tag for test files
       (lambda ()
         (when (string-match "test" (buffer-file-name))
           '("test")))))
#+end_src

For example, a TODO in `/projects/myapp/src/config.py` might get these tags:
`:repo_myapp:dir_src:file_py:name_config:`

** Planned work:
- [ ] Implement a way to repair file paths if they move, e.g. by tracking git renames.
- [ ] Make archiving synchronize back to the code file.
- [ ] Support keywords other than TODO/DONE
- [ ] Potentially make the tags update if the file changes, etc.

** Other notes:

Large amounts of this were written by Claude 3.7 using aider.
