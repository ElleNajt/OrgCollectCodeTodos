* org-collect-code-todos

An Emacs package that automatically collects TODO comments from your code files into a centralized Org mode file.

This org mode file is kept read-only, except for toggling TODO/DONE and archiving, to keep synchronization simple but keep compatibility with standard org-mode functionality.

Changes to the TODO in the source code file update in the org mode file by giving each TODO an ID. When a TODO is deleted from the source code file, it is archived in the todo org mode file.

Written *almost* entirely by Claude 3.7 using aider.

** Overview

`org-collect-code-todos` scans your code files for TODO comments and maintains a centralized Org mode file where you can track and manage them. When you mark a TODO as DONE in the Org file, it updates the corresponding comment in the source code.

** Features

- **Automatic Collection**: Scans code files for TODO comments when you save them
- **UUID Tracking**: Uses unique IDs to maintain the connection between TODOs in code and Org entries
- **Read-Only Protection**: Prevents edits to the Org file while allowing TODO state changes, scheduling and archiving. This is to ensure there is a single source of truth and save headaches.
- **Automatic Archiving**: Archives TODOs in the Org file when they're deleted from the source code
- **Supports Multiple Languages**: Works with any programming language that uses standard comment syntax

** Configuration

#+begin_src emacs-lisp :tangle yes

;; Set the path for your code TODOs file (default is ~/org/code-todos.org)
(setq org-collect-code-todos-file "~/my-todos.org")

;; Change the key for toggling TODO state in source code
(setq org-collect-code-todos-toggle-key (kbd "C-c t"))

;; Change the archive file location
(setq org-collect-code-todos-archive-file "~/my-archive.org")
#+end_src


** Usage

1. Add TODOs to your code as comments:
   
   #+begin_src python
   # TODO This needs optimization
   #+end_src

2. Save the file, and the TODO will be given an ID and collected into your org-collect-code-todos file.

This will only detect TODOs that appear after some number of comment characters, followed by whitespace.

3. In the Org file, you can:
   - Mark TODOs as DONE (which updates the source code)
   - Schedule TODOs or set deadlines
   - Archive completed TODOs

4. When you mark a TODO as DONE in the Org file, the corresponding comment in your code will be updated:
   
   #+begin_src python
   # DONE This needs optimization
   #+end_src

5. You can also toggle TODO/DONE state directly in your source code:
   - Place your cursor on a TODO line
   - Press C-c C-t (or your configured key)
   - The state will toggle between TODO and DONE
   - The change will be synchronized with the org file

   #+begin_src emacs-lisp
   ;; Example of binding a different key for toggling
   (setq org-collect-code-todos-toggle-key (kbd "C-c t"))
   #+end_src
   
6. You can jump from a TODO in your source code to its entry in the org file:
   - Place your cursor on a TODO line
   - Press C-c C-j (or your configured key)
   - Emacs will open the org file and jump to the corresponding entry

   #+begin_src emacs-lisp
   ;; Example of binding a different key for jumping
   (setq org-collect-code-todos-jump-key (kbd "C-c j"))
   #+end_src

7. The org file is kept read only, to prevent synchronization issues.

** License

This project is licensed under the MIT License - see the LICENSE file for details.


* Improvements

*** TODO Add tags
*** TODO Handle hierarchies
*** TODO Treat a paragraph of comments starting as a TODO as a header plus info.
