* org-collect-code-todos

An Emacs package that automatically collects TODO comments from your code files into a centralized Org mode file.

This org mode file is kept read-only, except for toggling TODO/DONE and scheduling, to keep synchronization simple but keep compatibility with standard org-mode functionality, e.g. org agenda.

Changes to the TODO in the source code file update in the org mode file. When a TODO is deleted from the source code file, it is archived from the todo org mode file. TODOs can be scheduled or given deadlines, and this is synchronized.

Large amounts of this were written by Claude 3.7 using aider.

** Configuration

#+begin_src emacs-lisp :tangle yes

;; Set the path for your code TODOs file (default is ~/org/code-todos.org)
(setq org-collect-code-todos-file "~/code-todos.org")

;; Change the archive file location
(setq org-collect-code-todos-archive-file "~/code-todos-archive.org")

;; Set the key for toggling TODO state in source code and jumping to the org entry
(map! :map prog-mode-map
      :n "C-c C-t" #'org-collect-code-todos-toggle-todo-state
      :n "C-c C-s" #'org-collect-code-todos-schedule
      :n "C-c C-d" #'org-collect-code-todos-deadline
      :n "C-c C-j" #'org-collect-code-todos-goto-org-todo)
#+end_src

#+RESULTS:


** Usage

1. Add TODOs to your code as comments:
   
   #+begin_src python
   # TODO This needs optimization
   #+end_src

2. Save the file, and the TODO will be given an ID and collected into your org-collect-code-todos file.

In the source code file you will see:

   #+begin_src python
# TODO[1cbe31f98195af20] This needs optimization
   #+end_src


In the org file you will see:

#+begin_src org
* TODO This needs optimization :test_py:
:PROPERTIES:
:TODO_ID: 1cbe31f98195af20
:FILE_PATH: /home/elle/code/OrgCollectCodeTodos/test.py
:END:
#+end_src

This will only detect TODOs that appear after some number of comment characters, followed by whitespace.

** Working with TODOs

*** In the Org File

In the Org file, you can:
   - Mark TODOs as DONE (which updates the source code)
   - Schedule TODOs or set deadlines
   - Archive completed TODOs

The Org file is kept read-only to prevent synchronization conflicts, but specific operations like changing TODO states, scheduling, and deadlines are allowed through special handling.

*** In Source Code


You can add text to a TODO, and the text will be refleted in the org mode todo. This is achieved by using the ID.

When you mark a TODO as DONE in the Org file, the corresponding comment in your code will be updated:
   
#+begin_src python
# DONE[d7dab7fc6b277026] This needs optimization
#+end_src

While the actual TODO toggle function calls and scheduling only happen in the org mode file, we provide convenience functions to work with TODOs directly from your source code:

1. *Toggle TODO/DONE state*:
   - Place your cursor on a TODO line
   - Use `org-collect-code-todos-toggle-todo-state`
   - This finds the corresponding entry in the org file and toggles its state there
   - The change is then synchronized back to the source code

2. *Schedule a TODO*:
   - Place your cursor on a TODO line
   - Use `org-collect-code-todos-schedule`
   - This finds the corresponding entry in the org file and calls `org-schedule` on it
   - The scheduling information is then synchronized back to the source code

3. *Set a deadline*:
   - Place your cursor on a TODO line
   - Use `org-collect-code-todos-deadline`
   - This finds the corresponding entry in the org file and calls `org-deadline` on it
   - The deadline information is then synchronized back to the source code

4. *Jump to Org entry*:
   - Place your cursor on a TODO line
   - Use `org-collect-code-todos-goto-org-todo`
   - Emacs will open the Org file and jump to the corresponding entry

** Synchronization Details

The package maintains synchronization through these mechanisms:

1. *File Saving*: When you save a source file, all TODOs are collected and synchronized with the Org file
2. *State Changes*: When you change a TODO state in the org file, the change is propagated to the source code
3. *ID Tracking*: Each TODO has a unique ID that maintains the connection between source and Org entries
4. *Orphan Handling*: If a TODO is removed from source code, it's marked as orphaned in the Org file
5. *Single Source of Truth*: The org file is the authoritative source for TODO states and scheduling information

Make sure to put the code-todos.org file somewhere where your org agenda will scan for it!


* Planned work:
- [ ] Implement a way to repair file paths if they move, e.g. by tracking git renames.
- [ ] Add multi line support
