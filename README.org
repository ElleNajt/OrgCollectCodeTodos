* org-collect-code-todos

An Emacs package that automatically collects TODO comments from your code files into a centralized Org mode file. Tested with .py, .ts, .nix, .el, .c, but should work with anything prog-mode, on comments that match (whitespace)(commentcharacter)(whitespace)TODO.

This org mode file is kept read-only, except for toggling TODO/DONE and scheduling, to keep synchronization simple but keep compatibility with standard org-mode functionality.

Changes to the TODO in the source code file update in the org mode file by giving each TODO an ID. When a TODO is deleted from the source code file, it is archived in the todo org mode file.

Written *almost* entirely by Claude 3.7 using aider.

** Design Philosophy

The core design principle of this package is to maintain a controlled flow of information between TODOs in source code and a centralized Org file, while keeping the system simple and robust:

- *Directed Information Flow*: Different types of information flow in specific directions:
  - TODO text content flows from source code to org file
  - TODO state (TODO/DONE) flows bidirectionally
  - Scheduling and deadline information flows bidirectionally
  - Tags and properties are managed in the org file

- *Unique IDs*: Each TODO is assigned a unique ID to maintain the connection between source code and Org entries.
- *Read-Only Org File*: The Org file is kept read-only (except for allowed operations) to prevent synchronization conflicts.
- *Minimal Disruption*: The package aims to integrate with your existing workflow without requiring significant changes.

** Technical Implementation

The package works through these key mechanisms:

1. *TODO Detection*: When you save a file, the package scans for TODO comments and assigns unique IDs to new ones.
2. *Org File Synchronization*: TODOs are organized in a structured Org file with properties to track their source.
3. *State Synchronization*: Changes to TODO states in either the source code or Org file are propagated to the other.
4. *Orphan Handling*: TODOs that are removed from source code are archived in the Org file.

** Overview

`org-collect-code-todos` scans your code files for TODO comments and maintains a centralized Org mode file where you can track and manage them. When you mark a TODO as DONE in the Org file, it updates the corresponding comment in the source code.

** Features

- Automatic Collection: Scans code files for TODO comments when you save them
- UUID Tracking: Uses unique IDs to maintain the connection between TODOs in code and Org entries
- Read-Only Protection: Prevents edits to the Org file while allowing TODO state changes, scheduling and archiving. This is to ensure there is a single source of truth and save headaches.
- Automatic Archiving: Archives TODOs in the Org file when they're deleted from the source code
- Supports Multiple Languages: Works with any programming language that uses standard comment syntax

** Configuration

#+begin_src emacs-lisp :tangle yes

;; Set the path for your code TODOs file (default is ~/org/code-todos.org)
(setq org-collect-code-todos-file "~/code-todos.org")

;; Change the archive file location
(setq org-collect-code-todos-archive-file "~/code-todos-archive.org")

;; Set the key for toggling TODO state in source code and jumping to the org entry
(map! :map prog-mode-map
      :n "C-c C-t" #'org-collect-code-todos-toggle-todo-state
      :n "C-c C-s" #'org-collect-code-todos-schedule
      :n "C-c C-d" #'org-collect-code-todos-deadline
      :n "C-c C-j" #'org-collect-code-todos-goto-org-todo)
#+end_src

#+RESULTS:


** Usage

1. Add TODOs to your code as comments:
   
   #+begin_src python
   # TODO This needs optimization
   #+end_src

2. Save the file, and the TODO will be given an ID and collected into your org-collect-code-todos file.

In the source code file you will see:

   #+begin_src python
# TODO[1cbe31f98195af20] This needs optimization
   #+end_src


In the org file you will see:

#+begin_src org
* TODO This needs optimization :test_py:
:PROPERTIES:
:TODO_ID: 1cbe31f98195af20
:FILE_PATH: /home/elle/code/OrgCollectCodeTodos/test.py
:END:
#+end_src

This will only detect TODOs that appear after some number of comment characters, followed by whitespace.

** Working with TODOs

*** In the Org File

In the Org file, you can:
   - Mark TODOs as DONE (which updates the source code)
   - Schedule TODOs or set deadlines
   - Archive completed TODOs

The Org file is kept read-only to prevent synchronization conflicts, but specific operations like changing TODO states, scheduling, and deadlines are allowed through special handling.

*** In Source Code

When you mark a TODO as DONE in the Org file, the corresponding comment in your code will be updated:
   
#+begin_src python
# DONE[d7dab7fc6b277026] This needs optimization
#+end_src

While the actual TODO state changes and scheduling only happen in the org mode file, we provide convenience functions to work with TODOs directly from your source code:

1. *Toggle TODO/DONE state*:
   - Place your cursor on a TODO line
   - Use `org-collect-code-todos-toggle-todo-state`
   - This finds the corresponding entry in the org file and toggles its state there
   - The change is then synchronized back to the source code

2. *Schedule a TODO*:
   - Place your cursor on a TODO line
   - Use `org-collect-code-todos-schedule`
   - This finds the corresponding entry in the org file and calls `org-schedule` on it
   - The scheduling information is then synchronized back to the source code

3. *Set a deadline*:
   - Place your cursor on a TODO line
   - Use `org-collect-code-todos-deadline`
   - This finds the corresponding entry in the org file and calls `org-deadline` on it
   - The deadline information is then synchronized back to the source code

4. *Jump to Org entry*:
   - Place your cursor on a TODO line
   - Use `org-collect-code-todos-goto-org-todo`
   - Emacs will open the Org file and jump to the corresponding entry

** Synchronization Details

The package maintains synchronization through these mechanisms:

1. *File Saving*: When you save a source file, all TODOs are collected and synchronized with the Org file
2. *State Changes*: When you change a TODO state in the org file, the change is propagated to the source code
3. *ID Tracking*: Each TODO has a unique ID that maintains the connection between source and Org entries
4. *Orphan Handling*: If a TODO is removed from source code, it's marked as orphaned in the Org file
5. *Single Source of Truth*: The org file is the authoritative source for TODO states and scheduling information

Make sure to put the code-todos.org file somewhere where your org agenda will scan for it!

** License

This project is licensed under the MIT License - see the LICENSE file for details.


** Choices:
- Decided not to implement hierarchies conversion (## -> **). Mostly this is because this makes comments from multiple files mix in a confusing way with each other, though that could be fixed by adding file headers to the todo file, this feels like too much complexity. There is a working version at: cdcdc77287212412346b67b23820e26050471f30 .


** Planned Improvements:

*** TODO Add tags
*** TODO Treat a paragraph of comments starting as a TODO as a header plus info.
*** TODO Add scheduling directly in the source code
