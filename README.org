* org-collect-code-todos

An Emacs package that automatically collects TODO comments from your code files into a centralized Org mode file. Tested with .py, .ts, .nix, .el, .c, but should work with anything prog-mode, on comments that match (whitespace)(commentcharacter)(whitespace)TODO.

This org mode file is kept read-only, except for toggling TODO/DONE and archiving, to keep synchronization simple but keep compatibility with standard org-mode functionality.

Changes to the TODO in the source code file update in the org mode file by giving each TODO an ID. When a TODO is deleted from the source code file, it is archived in the todo org mode file.

Written *almost* entirely by Claude 3.7 using aider.

** Overview

`org-collect-code-todos` scans your code files for TODO comments and maintains a centralized Org mode file where you can track and manage them. When you mark a TODO as DONE in the Org file, it updates the corresponding comment in the source code.

** Features

- Automatic Collection: Scans code files for TODO comments when you save them
- UUID Tracking: Uses unique IDs to maintain the connection between TODOs in code and Org entries
- Read-Only Protection: Prevents edits to the Org file while allowing TODO state changes, scheduling and archiving. This is to ensure there is a single source of truth and save headaches.
- Automatic Archiving: Archives TODOs in the Org file when they're deleted from the source code
- Supports Multiple Languages: Works with any programming language that uses standard comment syntax

** Configuration

#+begin_src emacs-lisp :tangle yes

;; Set the path for your code TODOs file (default is ~/org/code-todos.org)
(setq org-collect-code-todos-file "~/my-todos.org")

;; Change the archive file location
(setq org-collect-code-todos-archive-file "~/my-archive.org")

;; Set the key for toggling TODO state in source code and jumping to the org entry
(map! :map prog-mode-map
      :n "C-c C-t" #'org-collect-code-todos-toggle-state-at-point
      :n "C-c C-s" #'org-collect-code-todos-schedule-at-point
      :n "C-c C-d" #'org-collect-code-todos-set-deadline-at-point
      :n "C-c C-j" #'org-collect-code-todos-jump-to-org-entry)
#+end_src

#+RESULTS:


** Usage

1. Add TODOs to your code as comments:
   
   #+begin_src python
   # TODO This needs optimization
   #+end_src

2. Save the file, and the TODO will be given an ID and collected into your org-collect-code-todos file.

In the source code file you will see:

   #+begin_src python
# TODO[1cbe31f98195af20] This needs optimization
   #+end_src


In the org file you will see:

#+begin_src org
* TODO This needs optimization :test_py:
:PROPERTIES:
:TODO_ID: 1cbe31f98195af20
:LAST: This needs optimization
:END:
[[/home/elle/code/OrgCollectCodeTodos/test.py][This needs optimization]]
#+end_src

This will only detect TODOs that appear after some number of comment characters, followed by whitespace.

1. In the Org file, you can:
   - Mark TODOs as DONE (which updates the source code)
   - Schedule TODOs or set deadlines
   - Archive completed TODOs

2. When you mark a TODO as DONE in the Org file, the corresponding comment in your code will be updated:
   
   #+begin_src python
   # DONE[d7dab7fc6b277026] This needs optimization
   #+end_src

3. You can also toggle TODO/DONE state directly in your source code:
   - Place your cursor on a TODO line
   - Invoke org-collect-code-todos-toggle-state-at-point
   - The state will toggle between TODO and DONE
   - The change will be synchronized with the org file

4. You can jump from a TODO in your source code to its entry in the org file:
   - Place your cursor on a TODO line
   - Invoke org-collect-code-todos-jump-to-org-entry
   - Emacs will open the org file and jump to the corresponding entry

5. The org file is kept read only, to keep sychronization simple. Just edit the todo in the source code file and the changes will be reflected in the org file. The code uses the ID to do this.

6. Make sure to put the code-todos.org file somewhere were you org agenda will scan for it!

** License

This project is licensed under the MIT License - see the LICENSE file for details.


** Choices:
- Decided not to implement hierarchies conversion (## -> **). Mostly this is because this makes comments from multiple files mix in a confusing way with each other, though that could be fixed by adding file headers to the todo file, this feels like too much complexity. There is a working version at: cdcdc77287212412346b67b23820e26050471f30 .


** Planned Improvements:

*** TODO Add tags
*** TODO Treat a paragraph of comments starting as a TODO as a header plus info.
*** TODO Add scheduling directly in the source code
